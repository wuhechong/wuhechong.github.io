<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2020/04/11/hello-world/</url>
    <content><![CDATA[<p>滕王高阁临江渚，佩玉鸣鸾罢歌舞。</p>
<p>画栋朝飞南浦云，珠帘暮卷西山雨。</p>
<p>闲云潭影日悠悠，物换星移几度秋。</p>
<p>阁中帝子今何在？槛外长江空自流。 </p>
]]></content>
  </entry>
  <entry>
    <title>hexo+github搭建博客</title>
    <url>/2020/04/13/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，是搭建博客的首选框架。并且hexo有许多主题风格可以自由挑选，满足各种博客风格</p>
<p>环境：linux</p>
<ol>
<li><p>安装node.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get install nodejs</span><br><span class="line">$ node -v 	&#x2F;&#x2F;查看版本号检查是否安装成功</span><br></pre></td></tr></table></figure></li>
<li><p>安装npm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get install npm</span><br><span class="line">$ npm -v&#x2F;&#x2F;查看版本号检查是否安装成功</span><br><span class="line">$ npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org 	&#x2F;&#x2F;npm换国内源</span><br></pre></td></tr></table></figure></li>
<li><p>安装hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li><p>创建blog（名字可以更改）文件夹存放博客相关文件；<br>进入blog目录下初始化博客；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure>
<p>执行完后会在blog文件夹生成一堆工程文件；</p>
</li>
<li><p>预览效果<br>输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>打开浏览器输入’localhost:4000’可以查看到hexo欢迎信息；</p>
</li>
<li><p>添加第一篇博客<br>输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo n &quot;博客的标题&quot;</span><br></pre></td></tr></table></figure>
<p>此时会在”blogs/ource/_posts”文件夹下生成一个”博客的标题.md”的文件，在里面编辑你的博客内容</p>
</li>
<li><p>将博客部署到github</p>
</li>
</ol>
<ul>
<li>新建一个仓库 仓库名格式为”你的github帐号名.github.io”</li>
<li>安装部署插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>打开blog目录下的配置文件_config.yml，在最下面配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 这里填写你的仓库路径</span><br></pre></td></tr></table></figure></li>
<li>配置完成后保存并退出</li>
<li>生成并上传博客到github<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
<li>在浏览器输入”你的github帐号名.github.io”就可以查看部署后的博客了</li>
</ul>
<ol start="8">
<li>hexo相关命令和说明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">命令简写</span><br><span class="line">hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 127.0.0.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存,需要重新生成blog的时候使用，非必须</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>配置多个ssh密钥</title>
    <url>/2020/04/14/%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAssh%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<p>早些时候生成了一个ssh密钥用于连接远程的服务器,如今为了连接github需要使用新的密钥，后面可能还会有个码云，它们项目的ssh-key都不一样，此时就只能通过配置config使之可配多个key，当用ssh读取远程仓库的时候，自动去匹配ssh-key。</p>
<ol>
<li><p>生成新的密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class="line">$ Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa): &#x2F;root&#x2F;.ssh&#x2F;id_rsa_github</span><br><span class="line">&#x2F;&#x2F;可以在此时输入密钥名或生成后手动修改</span><br></pre></td></tr></table></figure></li>
<li><p>此时生成了id_rsa_github（私钥）和 id_rsa_github.pub（公钥）文件，将公钥文件的内容添加到你github上。码云等其他账号下的同上。</p>
</li>
<li><p>在.ssh目录下创建config文件（已经有了可以跳过这步），在里面配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># github</span><br><span class="line">Host github #主机名 连接时代替服务器地址名</span><br><span class="line">HostName github.com #主机地址</span><br><span class="line">User git  #代表git账户</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_github #github的私钥</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">#Port 端口号 #若git地址端口号非默认，在此处配置</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否可以连接成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T github  &#x2F;&#x2F;测试github连接成功</span><br><span class="line">Warning: Permanently added the RSA host key for IP address &#39;18.***.***.***&#39; to the list of known hosts.</span><br><span class="line">Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">&#x2F;&#x2F;出现如上信息表示连接成功</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过主机名操作例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone github:geekFeier&#x2F;my-dream.git </span><br><span class="line">&#x2F;&#x2F;在配置文件中配置了github这个主机，用github代替&quot;git@你的邮箱&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime快捷键插入当前时间</title>
    <url>/2020/04/12/sublime%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%8F%92%E5%85%A5%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>1、创建时间插件  Tools -&gt; developer -&gt; New Plugin…</p>
<p>2、插入如下代码，保存在 Packages\User\addCurrentTime.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sublime</span><br><span class="line">import sublime_plugin</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">class AddCurrentTimeCommand(sublime_plugin.TextCommand):</span><br><span class="line">    def run(self, edit):</span><br><span class="line">        self.view.run_command(&quot;insert_snippet&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;contents&quot;: &quot;%s&quot; % datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>3、设置快捷键映射  Preference → Key Bindings - User</p>
<p><code>{ &quot;keys&quot;: [&quot;ctrl+z&quot;], &quot;command&quot;: &quot;add_current_time&quot;}</code></p>
<p>4、重启sublime3即可</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置https方法</title>
    <url>/2020/04/15/Nginx%E9%85%8D%E7%BD%AEhtts%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>为了熟悉一下Nginx服务器的配置，决定尝试配置一下ssl证书，让网站在被访问时有个绿色的小锁。</p>
<ol>
<li>获取ssl证书</li>
</ol>
<p>ssl证书的功能主要是证明身份和加密，一般由有公信力的CA机构签发，所以大部分都是付费，当然也有免费的。<br>申请免费的可以在腾讯云控制面板-》云产品-》域名与网站-》SSL证书管理里点击申请一个一年有效期的免费ssl证书。<br>申请后会获得一个压缩包，里面有各种服务器版本的ssl证书，此处以Nginx服务器为例。</p>
<hr>
<ul>
<li><small><em>也可以自己使用 OpenSSL 工具生成 SSL Key 和 CSR 文件，然后上传 CSR 文件给CA机构，完成签署后会获得.crt后缀的证书文件。</em></small></li>
</ul>
<hr>
<ol start="2">
<li><p>将解压后Nginx文件夹目录里的证书和密钥上传到服务器中并记录下存放的目录。</p>
</li>
<li><p>修改Nginx的配置文件如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #ssl参数</span><br><span class="line">    listen              443 ssl;</span><br><span class="line">    server_name         你的域名;</span><br><span class="line">    #证书文件</span><br><span class="line">    ssl_certificate     证书路径&#x2F;证书名.crt;</span><br><span class="line">    #密钥文件</span><br><span class="line">    ssl_certificate_key 密钥路径&#x2F;密钥名.key;</span><br><span class="line">    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers         HIGH:!aNULL:!MD5;</span><br><span class="line">    #...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启服务器即可</p>
</li>
<li><p>HTTPS服务器优化，减少 CPU 运算量</p>
</li>
</ol>
<p>SSL 的运行计算需要消耗额外的 CPU 资源，SSL 通讯过程中『握手』阶段的运算最占用 CPU 资源，有两个方法可以减少每台客户端的运算量：</p>
<pre><code>设置 keepalive 长连接，一个连接发送更多个请求
复用 SSL 会话参数，在并行并发的连接数中避免进行多次 SSL“握手”</code></pre><p>这些会话会存储在一个 SSL 会话缓存里面，通过命令 ssl_session_cache 配置，可以使缓存在机器间共享，然后利用客戶端在“握手”阶段使用的 seesion id 去查询服务端的 session cathe(如果服务端设置有的话)，简化“握手”阶段。</p>
<p>配置信息如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    #配置共享会话缓存大小</span><br><span class="line">    ssl_session_cache   shared:SSL:10m;</span><br><span class="line">    #配置会话超时时间</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen              443 ssl;</span><br><span class="line">        server_name         你的域名;</span><br><span class="line">        #设置长连接</span><br><span class="line">        keepalive_timeout   70;</span><br><span class="line"></span><br><span class="line">        #证书文件</span><br><span class="line">    	ssl_certificate     证书路径&#x2F;证书名.crt;</span><br><span class="line">    	#密钥文件</span><br><span class="line">    	ssl_certificate_key 密钥路径&#x2F;密钥名.key;</span><br><span class="line">    	ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    	ssl_ciphers         HIGH:!aNULL:!MD5;</span><br><span class="line">        #...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用储存引擎——InnDB和Myisam的区别</title>
    <url>/2020/04/16/MySQL%E5%B8%B8%E7%94%A8%E5%82%A8%E5%AD%98%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94InnDB%E5%92%8CMyisam%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="MyISAM和InnoDB对比"><a href="#MyISAM和InnoDB对比" class="headerlink" title="MyISAM和InnoDB对比"></a>MyISAM和InnoDB对比</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="left">MyISAM</th>
<th align="left">InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">储存方式</td>
<td align="left">每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。<br>.frm文件存储表定义。<br>数据文件的扩展名为.MYD (MYData)。<br>索引文件的扩展名是.MYI (MYIndex)。</td>
<td align="left">在InnoDB存储引擎中，所有数据都存放在表空间(tablespace)中，表空间由段(segment)、区(extent)、页(page)、行（Row）组成</td>
</tr>
<tr>
<td align="center">事务处理</td>
<td align="left">不支持</td>
<td align="left">支持事务、外部键等高级数据库功能</td>
</tr>
<tr>
<td align="center">锁</td>
<td align="left">支持表锁</td>
<td align="left">支持行锁也支持表锁，在读取数据时不加锁，当无法确定扫描范围时，InnoDB会变成使用表锁；例如执行”update table set type=1 where name like %xx%”</td>
</tr>
<tr>
<td align="center">性能</td>
<td align="left">MyISAM适合查询以及插入为主的应用，查询和搜索数据较快，但插入和更新数据时效率较低。适合经常被查询但很少修改的数据，例如国家省市等数据。</td>
<td align="left">InnoDB支持事务、外部键等功能，并发量较大，适合需要插入大量update的表，查询的时候相率相对较低，适合储存安全要求较高的，经常修改的数据。</td>
</tr>
</tbody></table>
<ul>
<li><p>InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数 即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。</p>
</li>
<li><p>DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</p>
</li>
<li><p>LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的 InnoDB特性（例如外键）的表不适用。 </p>
</li>
</ul>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
